# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Continuous Integration - Master"
on:
  push:
    # run on pushes to master
    branches:
      - master
jobs:
  code-tests:
    runs-on: [ubuntu-20.04]
    steps:
    - uses: actions/checkout@v2
    - name: Java Checkstyle
      timeout-minutes: 20
      run: |
        mvn checkstyle:check
    - name: Python install
      timeout-minutes: 20
      run: |
        pip install pylint
        pip install psycopg2-binary
        pip install wheel
        pip install uWSGI
    - name: Python Checkstyle
      timeout-minutes: 20
      run: |
        pylint --rcfile=./.pylintrc ./src/*/*.py
    - name: Java Unit Tests
      timeout-minutes: 20
      run: |
        mvn test
    - name: Java Code Coverage
      timeout-minutes: 20
      run: |
        for SERVICE in "balancereader" "ledgerwriter" "transactionhistory"; do
          echo "checking $SERVICE..."
          # save current working dir to memory and cd to src/$SERVICE
          pushd src/$SERVICE
            mvn jacoco:report
            echo "Coverage for $SERVICE:"
            awk -F, \
            '{ instructions += $4 + $5; covered += $5 } END \
            { print covered, "/", instructions, " instructions covered"; \
            print int(100*covered/instructions), "% covered" }' \
            target/site/jacoco/jacoco.csv
          # return to previously saved path
          popd
        done
    - name: Python Unit Tests
      timeout-minutes: 20
      run: |
        set -x
        pip install psycopg2-binary
        for SERVICE in "contacts" "userservice"; do
          echo "testing $SERVICE..."
          # save current working dir to memory and cd to src/$SERVICE
          pushd src/$SERVICE
            python3 -m venv $HOME/venv-$SERVICE
            source $HOME/venv-$SERVICE/bin/activate
            pip install -r requirements.txt
            python -m pytest -v -p no:warnings
            deactivate
          # return to previously saved path
          popd
        done
    - name: Python Code Coverage
      timeout-minutes: 20
      run: |
        for SERVICE in "contacts" "userservice"; do
          echo "testing $SERVICE..."
          # save current working dir to memory and cd to src/$SERVICE
          pushd src/$SERVICE
            python3 -m venv $HOME/venv-$SERVICE
            source $HOME/venv-$SERVICE/bin/activate
            pip install -r requirements.txt
            python -m pytest --cov=./ tests/
            deactivate
          # return to previously saved path
          popd
        done


  # deployment-tests:
  #   runs-on: [ubuntu-20.04]
  #   needs: code-tests
  #   # strategy:
  #   #   matrix:
  #   #     profile: ["local-code"]
  #   #   fail-fast: true
  #   steps:

  #     - name: Build + Deploy PR images to GKE
  #       timeout-minutes: 20
  #       run: |
  #         PR_NUMBER=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
  #         NAMESPACE="pr${PR_NUMBER}"
  #         echo "::set-env name=NAMESPACE::$NAMESPACE"
  #         echo "::set-env name=PR_NUMBER::$PR_NUMBER"
  #         gcloud container clusters get-credentials $PR_CLUSTER --zone $ZONE --project $PROJECT_ID
  #         cat <<EOF | kubectl apply -f -
  #         apiVersion: v1
  #         kind: Namespace
  #         metadata:
  #           name: $NAMESPACE
  #         EOF
  #         echo Deploying application
  #         skaffold config set --global local-cluster false
  #         skaffold run --default-repo=gcr.io/$PROJECT_ID/$GITHUB_REF --tag=$GITHUB_SHA --namespace=$NAMESPACE
  #       env:
  #         PROJECT_ID: "learning-project-288414"
  #         PR_CLUSTER: "toptal-gke"
  #         ZONE: "us-central1-c"
  #         ACTIONS_ALLOW_UNSECURE_COMMANDS: true

  #     - name: Wait For Pods
  #       timeout-minutes: 20
  #       run: |
  #         set -x
  #         kubectl config set-context --current --namespace=$NAMESPACE
  #         kubectl wait --for=condition=available --timeout=300s deployment/frontend
  #         kubectl wait --for=condition=available --timeout=300s deployment/contacts
  #         kubectl wait --for=condition=available --timeout=300s deployment/userservice
  #         kubectl wait --for=condition=available --timeout=300s deployment/ledgerwriter
  #         kubectl wait --for=condition=available --timeout=300s deployment/transactionhistory
  #         kubectl wait --for=condition=available --timeout=300s deployment/balancereader
  #         kubectl wait --for=condition=available --timeout=300s deployment/loadgenerator
  #         kubectl wait --for=condition=ready --timeout=300s pod/accounts-db-0
  #         kubectl wait --for=condition=ready --timeout=300s pod/ledger-db-0